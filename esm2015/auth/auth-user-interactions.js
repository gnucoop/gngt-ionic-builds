/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Gnucoop Angular Toolkit (gngt).
 *
 * Gnucoop Angular Toolkit (gngt) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gnucoop Angular Toolkit (gngt) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gnucoop Angular Toolkit (gngt).  If not, see http://www.gnu.org/licenses/.
 *
 */
import { AuthUserInteractionsService as CoreAuthUserInteractionsService } from '@gngt/core/auth';
import { from } from 'rxjs';
import { map, mapTo, switchMap } from 'rxjs/operators';
export class AuthUserInteractionsService extends CoreAuthUserInteractionsService {
    constructor(_ts, _alert, _toast) {
        super();
        this._ts = _ts;
        this._alert = _alert;
        this._toast = _toast;
    }
    askLogoutConfirm() {
        const strings = ['Are you sure you want to logout?', 'Cancel', 'Ok'];
        return this._ts.get(strings).pipe(switchMap(ts => from(this._alert.create({
            message: ts[0],
            buttons: [{ text: ts[1], role: 'cancel' }, { text: ts[2], role: 'confirm' }]
        }))), switchMap(alert => from(alert.present()).pipe(mapTo(alert))), switchMap(alert => from(alert.onDidDismiss())), map(evt => evt.role === 'confirm'));
    }
    showLoginError(error) {
        this._toast.create({ message: error, duration: 3000 }).then(t => t.present());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC11c2VyLWludGVyYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9pb25pYy9hdXRoL2F1dGgtdXNlci1pbnRlcmFjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQkc7QUFFSCxPQUFPLEVBQUMsMkJBQTJCLElBQUksK0JBQStCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUkvRixPQUFPLEVBQUMsSUFBSSxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXJELE1BQU0sT0FBTywyQkFBNEIsU0FBUSwrQkFBK0I7SUFDOUUsWUFDWSxHQUFxQixFQUFVLE1BQXVCLEVBQ3RELE1BQXVCO1FBQ2pDLEtBQUssRUFBRSxDQUFDO1FBRkUsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUN0RCxXQUFNLEdBQU4sTUFBTSxDQUFpQjtJQUVuQyxDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsTUFBTSxPQUFPLEdBQUcsQ0FBQyxrQ0FBa0MsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckUsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzdCLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUM1QixPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNkLE9BQU8sRUFBRSxDQUFDLEVBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUMsQ0FBQztTQUN6RSxDQUFDLENBQUMsQ0FBQyxFQUNkLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBRSxLQUE2QixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ3JGLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBRSxLQUE2QixDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsRUFDdkUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUUsR0FBK0IsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQ2xFLENBQUM7SUFDSixDQUFDO0lBRUQsY0FBYyxDQUFDLEtBQWE7UUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQzlFLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEdudWNvb3AgQW5ndWxhciBUb29sa2l0IChnbmd0KS5cbiAqXG4gKiBHbnVjb29wIEFuZ3VsYXIgVG9vbGtpdCAoZ25ndCkgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEdudWNvb3AgQW5ndWxhciBUb29sa2l0IChnbmd0KSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggR251Y29vcCBBbmd1bGFyIFRvb2xraXQgKGduZ3QpLiAgSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBdXRoVXNlckludGVyYWN0aW9uc1NlcnZpY2UgYXMgQ29yZUF1dGhVc2VySW50ZXJhY3Rpb25zU2VydmljZX0gZnJvbSAnQGduZ3QvY29yZS9hdXRoJztcbmltcG9ydCB7QWxlcnRDb250cm9sbGVyLCBUb2FzdENvbnRyb2xsZXJ9IGZyb20gJ0Bpb25pYy9hbmd1bGFyJztcbmltcG9ydCB7T3ZlcmxheUV2ZW50RGV0YWlsfSBmcm9tICdAaW9uaWMvY29yZSc7XG5pbXBvcnQge1RyYW5zbGF0ZVNlcnZpY2V9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHtmcm9tLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwLCBtYXBUbywgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjbGFzcyBBdXRoVXNlckludGVyYWN0aW9uc1NlcnZpY2UgZXh0ZW5kcyBDb3JlQXV0aFVzZXJJbnRlcmFjdGlvbnNTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIF90czogVHJhbnNsYXRlU2VydmljZSwgcHJpdmF0ZSBfYWxlcnQ6IEFsZXJ0Q29udHJvbGxlcixcbiAgICAgIHByaXZhdGUgX3RvYXN0OiBUb2FzdENvbnRyb2xsZXIpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgYXNrTG9nb3V0Q29uZmlybSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBzdHJpbmdzID0gWydBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gbG9nb3V0PycsICdDYW5jZWwnLCAnT2snXTtcbiAgICByZXR1cm4gdGhpcy5fdHMuZ2V0KHN0cmluZ3MpLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcCh0cyA9PiBmcm9tKHRoaXMuX2FsZXJ0LmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHRzWzBdLFxuICAgICAgICAgICAgICAgICAgICBidXR0b25zOiBbe3RleHQ6IHRzWzFdLCByb2xlOiAnY2FuY2VsJ30sIHt0ZXh0OiB0c1syXSwgcm9sZTogJ2NvbmZpcm0nfV1cbiAgICAgICAgICAgICAgICAgIH0pKSksXG4gICAgICAgIHN3aXRjaE1hcChhbGVydCA9PiBmcm9tKChhbGVydCBhcyBIVE1MSW9uQWxlcnRFbGVtZW50KS5wcmVzZW50KCkpLnBpcGUobWFwVG8oYWxlcnQpKSksXG4gICAgICAgIHN3aXRjaE1hcChhbGVydCA9PiBmcm9tKChhbGVydCBhcyBIVE1MSW9uQWxlcnRFbGVtZW50KS5vbkRpZERpc21pc3MoKSkpLFxuICAgICAgICBtYXAoZXZ0ID0+IChldnQgYXMgT3ZlcmxheUV2ZW50RGV0YWlsPGFueT4pLnJvbGUgPT09ICdjb25maXJtJyksXG4gICAgKTtcbiAgfVxuXG4gIHNob3dMb2dpbkVycm9yKGVycm9yOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLl90b2FzdC5jcmVhdGUoe21lc3NhZ2U6IGVycm9yLCBkdXJhdGlvbjogMzAwMH0pLnRoZW4odCA9PiB0LnByZXNlbnQoKSk7XG4gIH1cbn1cbiJdfQ==